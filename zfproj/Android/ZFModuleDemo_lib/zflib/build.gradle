apply plugin: 'com.android.library'

def ZF_ROOT_PATH = this.projectDir.getAbsolutePath() + '/../../../../../../../ZFFramework'
android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            if(System.getenv('ZFAndroidABI') != null && !System.getenv('ZFAndroidABI').isEmpty()) {
                // ZFAndroidABI=armeabi-v7a,arm64-v8a,x86 ./gradle assembleRelease
                abiFilters System.getenv('ZFAndroidABI').split(',')
            }
            else {
                // abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
            }
        }
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            java.srcDirs += this.projectDir.getAbsolutePath() + '/../../../../zfsrc/ZFImpl/sys_Android/java'
            assets.srcDirs += ['assets']
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    buildToolsVersion '29.0.3'
}

dependencies {
    implementation fileTree(includes: ['*.jar'], dir: 'libs')
    implementation fileTree(dir: ZF_ROOT_PATH + '/_release/Android/module/ZFCore/src/main/libs', includes: ['*.jar'])
}

import org.apache.tools.ant.taskdefs.condition.Os

task ZFSetup {
    doLast {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec {
                executable "cmd.exe"
                args "/c", ZF_ROOT_PATH + "/tools/util/copy_res.bat", this.projectDir.getAbsolutePath() + "/../../../../zfres", this.projectDir.getAbsolutePath() + "/src/main/assets/zfres"
            }
        }
        else {
            exec {
                executable "sh"
                args ZF_ROOT_PATH + "/tools/util/copy_res.sh", this.projectDir.getAbsolutePath() + "/../../../../zfres", this.projectDir.getAbsolutePath() + "/src/main/assets/zfres"
            }
        }
    }
}
preBuild.dependsOn ZFSetup

gradle.buildFinished {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        exec {
            executable "cmd.exe"
            args "/c", ZF_ROOT_PATH + "/tools/spec/Android/libs_copy.bat", "ZFModuleDemo_lib", this.projectDir.getAbsolutePath() + '/..'
        }
    }
    else {
        exec {
            executable "sh"
            args ZF_ROOT_PATH + "/tools/spec/Android/libs_copy.sh", "ZFModuleDemo_lib", this.projectDir.getAbsolutePath() + '/..'
        }
    }
}

